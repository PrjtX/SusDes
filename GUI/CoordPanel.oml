classdef CoordPanel < handle

	properties
		Tab
		handle
		XTar
		YTar
		ZTar
		XChc
		YChc
		ZChc	
		XDif
		YDif
		ZDif
		Xtgl
		Ytgl
		Ztgl
		ColActive   = [0 1 0];
		ColUnActive = [1 1 0];
		
		Wy = 0.2;
		Wz = 0.16;

		Y1 = 0.25;
		Y2 = 0.50;
		Y3 = 0.75;
		
		Z1 = 0.08;
		Z2 = 0.15;
		Z3 = 0.25;
		Z4 = 0.65;	
		
		Chc
		
		Tar
		
	end
	
	methods
		%%------------------------------------------------------------------------------------------------%%
		function obj = CoordPanel(Tab)			
			obj.Tab = Tab;		
			
			obj.Chc.X = 0;
			obj.Chc.Y = 0;
			obj.Chc.Z = 0;
			
			obj.Tar.X = 0;
			obj.Tar.Y = 0;
			obj.Tar.Z = 0;			
		end
		%%------------------------------------------------------------------------------------------------%%
		function Create(obj, Name, Position)
			%%%----%%%%%%----%%%%%%----%%%%%%----%%%%%%----%%%%%%----%%%%%%----%%%%%%----%%%%%%----%%%%%%----%%%%%%----%%%%%%----%%%%%%----%%%%%%----%%%
			Wy = obj.Wy;
			Wz = obj.Wz;

			Y1 = obj.Y1;
			Y2 = obj.Y2;
			Y3 = obj.Y3;
			Z1 = obj.Z1;
			Z2 = obj.Z2+0.05;
			Z3 = obj.Z3+0.05;
			Z4 = obj.Z4+0.05;				
			
			obj.handle = uipanel(obj.Tab, 'units', 'normalized', 'position', Position);	
			uicontrol(obj.handle,'Style','text', 'units', 'normalized', 'Position',[Y2-0.1    Z1  Wy*1.5 Wz],'String',Name);			
			uicontrol(obj.handle,'Style','text', 'units', 'normalized', 'Position',[Y1    Z2  Wy Wz],'String','X [mm]');
			uicontrol(obj.handle,'Style','text', 'units', 'normalized', 'Position',[Y2    Z2  Wy Wz],'String','Y [mm]');
			uicontrol(obj.handle,'Style','text', 'units', 'normalized', 'Position',[Y3    Z2  Wy Wz],'String','Z [mm]');
			uicontrol(obj.handle,'Style','text', 'units', 'normalized', 'Position',[Y1-0.1  Z3+0.04  0.05 0.08],'String','Tar');
			uicontrol(obj.handle,'Style','text', 'units', 'normalized', 'Position',[Y1-0.1  Z3+1.1*Wz+0.04  0.05 0.08],'String','Chc');
					
			obj.XTar = uicontrol(obj.handle,'Style','edit','String', 'none', 'units', 'normalized', 'position', [Y1-0.03 Z3 Wy Wz], 'backgroundcolor', obj.ColActive);
			obj.YTar = uicontrol(obj.handle,'Style','edit','String', 'none', 'units', 'normalized', 'position', [Y2-0.03 Z3 Wy Wz], 'backgroundcolor', obj.ColActive);
			obj.ZTar = uicontrol(obj.handle,'Style','edit','String', 'none', 'units', 'normalized', 'position', [Y3-0.03 Z3 Wy Wz], 'backgroundcolor', obj.ColActive);
			
			obj.XChc = uicontrol(obj.handle,'Style','edit','String', 'none', 'units', 'normalized', 'position', [Y1-0.03 Z3+1.1*Wz Wy Wz], 'enable', 'off');
			obj.YChc = uicontrol(obj.handle,'Style','edit','String', 'none', 'units', 'normalized', 'position', [Y2-0.03 Z3+1.1*Wz Wy Wz], 'enable', 'off');
			obj.ZChc = uicontrol(obj.handle,'Style','edit','String', 'none', 'units', 'normalized', 'position', [Y3-0.03 Z3+1.1*Wz Wy Wz], 'enable', 'off');						
			
			obj.XDif = uicontrol(obj.handle,'Style','pushbutton', 'units', 'normalized', 'String', ' ', 'position', [Y1-0.03 Z3+Wz Wy 0.03], 'backgroundcolor', [0.9 1 0.9]);
			obj.YDif = uicontrol(obj.handle,'Style','pushbutton', 'units', 'normalized', 'String', ' ', 'position', [Y2-0.03 Z3+Wz Wy 0.03], 'backgroundcolor', [0.9 1 0.9]);
			obj.ZDif = uicontrol(obj.handle,'Style','pushbutton', 'units', 'normalized', 'String', ' ', 'position', [Y3-0.03 Z3+Wz Wy 0.03], 'backgroundcolor', [0.9 1 0.9]);
			
			obj.Xtgl = uicontrol(obj.handle,'Style','togglebutton','String', 'Active', 'units', 'normalized', 'position', [Y1-0.03 Z4 Wy 0.1], 
			                                                                                        'callback', @(h,c) obj.ToggleField(h,c));
			obj.Ytgl = uicontrol(obj.handle,'Style','togglebutton','String', 'Active', 'units', 'normalized', 'position', [Y2-0.03 Z4 Wy 0.1], 
			                                                                                        'callback', @(h,c) obj.ToggleField(h,c));
			obj.Ztgl = uicontrol(obj.handle,'Style','togglebutton','String', 'Active', 'units', 'normalized', 'position', [Y3-0.03 Z4 Wy 0.1], 
			                                                                                        'callback', @(h,c) obj.ToggleField(h,c));
			%%%----%%%%%%----%%%%%%----%%%%%%----%%%%%%----%%%%%%----%%%%%%----%%%%%%----%%%%%%----%%%%%%----%%%%%%----%%%%%%----%%%%%%----%%%%%%----%%%
			obj.DeActiveField(obj.XTar);
			obj.DeActiveField(obj.YTar);
			obj.DeActiveField(obj.ZTar);
			%%%----%%%%%%----%%%%%%----%%%%%%----%%%%%%----%%%%%%----%%%%%%----%%%%%%----%%%%%%----%%%%%%----%%%%%%----%%%%%%----%%%%%%----%%%%%%----%%%
		end
		%%------------------------------------------------------------------------------------------------%%
		function SetPoint(obj, Type, X, Y, Z)
			switch Type
				case 'Chc'
					obj.Chc.X = X;
					obj.Chc.Y = Y;
					obj.Chc.Z = Z;	
				case 'Tar'
					obj.Tar.X = X;
					obj.Tar.Y = Y;
					obj.Tar.Z = Z;		
				case 'Both'
					obj.Chc.X = X;
					obj.Chc.Y = Y;
					obj.Chc.Z = Z;						
					obj.Tar.X = X;
					obj.Tar.Y = Y;
					obj.Tar.Z = Z;						
			end
		end
		%%------------------------------------------------------------------------------------------------%%
		function FieldWrite(obj, FieldHandle, Value)
			String = sprintf('%2.2f', Value);
			set(FieldHandle, 'string', String);
		end
		%%------------------------------------------------------------------------------------------------%%
		function Value = ReadField(obj, FieldHandle)
			String = get(FieldHandle, 'string');
			Value = str2num(String);
		end
		%%------------------------------------------------------------------------------------------------%%
		function ReadFieldType(obj, Type)
			
			switch Type
				case 'Chc'
					X = obj.ReadField(obj.XChc);
					Y = obj.ReadField(obj.YChc);
					Z = obj.ReadField(obj.ZChc);
					obj.SetPoint('Chc', X, Y, Z);
				case 'Tar'
					X = obj.ReadField(obj.XTar);
					Y = obj.ReadField(obj.YTar);
					Z = obj.ReadField(obj.ZTar);										
					obj.SetPoint('Tar', X, Y, Z);
			end
			
		end
		%%------------------------------------------------------------------------------------------------%%
		function WriteAllField(obj)
			
			obj.FieldWrite(obj.XChc, obj.Chc.X);
			obj.FieldWrite(obj.YChc, obj.Chc.Y);
			obj.FieldWrite(obj.ZChc, obj.Chc.Z);
			
			obj.FieldWrite(obj.XTar, obj.Tar.X);
			obj.FieldWrite(obj.YTar, obj.Tar.Y);
			obj.FieldWrite(obj.ZTar, obj.Tar.Z);			
			
		end
		%%------------------------------------------------------------------------------------------------%%
		function ActiveField(obj, FieldHandles)
			set(FieldHandles, 'backgroundcolor', obj.ColActive);
			set(FieldHandles, 'enable', 'on');
		end
		%%------------------------------------------------------------------------------------------------%%
		function DeActiveField(obj, FieldHandles)
			set(FieldHandles, 'backgroundcolor', obj.ColUnActive);
			set(FieldHandles, 'enable', 'off');
		end
		%%------------------------------------------------------------------------------------------------%%
		function ToggleField(obj, handle, callback)
			
			Value = get(handle, 'value');
			
			NameTgl = {'Xtgl', 'Ytgl', 'Ztgl'};
			NameFld = {'XTar', 'YTar', 'ZTar'};
			
			for k = 1:numel(NameTgl)
				if obj.(NameTgl{k}) == handle
					Field = obj.(NameFld{k});		
				end
			end
			
			
			if Value == 1
				obj.ActiveField(Field);
			else
				obj.DeActiveField(Field);
			end		
			
		end
		%%------------------------------------------------------------------------------------------------%%	
		function ActiveButtonPress(obj, handle)
			IniVal = get(handle, 'value');
			if IniVal == 1
				set(handle, 'value', 0);
				obj.ToggleField(handle, '');
			else
				set(handle, 'value', 1);
				obj.ToggleField(handle, '');
			end
			
		end
		%%------------------------------------------------------------------------------------------------%%
		function Point = getChc(obj)
			
			X = obj.ReadField(obj.XChc);
			Y = obj.ReadField(obj.YChc);
			Z = obj.ReadField(obj.ZChc);
			
			obj.Chc.X = X;
			obj.Chc.Y = Y;
			obj.Chc.Z = Z;
												
			Point(1,1) = obj.Chc.X;
			Point(2,1) = obj.Chc.Y;
			Point(3,1) = obj.Chc.Z;
			
		end
		%%------------------------------------------------------------------------------------------------%%	
		function Point = getTar(obj)
			
			X = obj.ReadField(obj.XTar);
			Y = obj.ReadField(obj.YTar);
			Z = obj.ReadField(obj.ZTar);
			
			obj.Tar.X = X;
			obj.Tar.Y = Y;
			obj.Tar.Z = Z;
												
			Point(1,1) = obj.Tar.X;
			Point(2,1) = obj.Tar.Y;
			Point(3,1) = obj.Tar.Z;
			
		end
		%%------------------------------------------------------------------------------------------------%%		
		function CompDiff(obj, Comp)
			
			obj.getChc();
			obj.getTar();
			
			switch Comp
				case 'X'
					Delta = abs(obj.Tar.X-obj.Chc.X);
				case 'Y'
					Delta = abs(obj.Tar.Y-obj.Chc.Y);
				case 'Z'
					Delta = abs(obj.Tar.Z-obj.Chc.Z);
			end
			
			Diff = 0;
			if Delta>=0.001
				Diff = 1;
			end

			if Diff == 1
				switch Comp
					case 'X'
						set(obj.XDif, 'backgroundcolor', [1 0 0]);
					case 'Y'
						set(obj.YDif, 'backgroundcolor', [1 0 0]);
					case 'Z'
						set(obj.ZDif, 'backgroundcolor', [1 0 0]);
				end
			else
				switch Comp
					case 'X'
						set(obj.XDif, 'backgroundcolor', [0.9 1 0.9]);
					case 'Y'
						set(obj.YDif, 'backgroundcolor', [0.9 1 0.9]);
					case 'Z'
						set(obj.ZDif, 'backgroundcolor', [0.9 1 0.9]);
				end				
			end
			
		end
		%%------------------------------------------------------------------------------------------------%%
		function CompDiffAll(obj)
			
			Comp = {'X', 'Y', 'Z'};
			for k = 1:numel(Comp)
				obj.CompDiff(Comp{k});
			end			
			
		end
		%%------------------------------------------------------------------------------------------------%%
		function ActiveAll(obj)
			
			TglList = {'Xtgl', 'Ytgl', 'Ztgl'};
			for k = 1:numel(TglList)
				Val = get(obj.(TglList{k}), 'value');
				if Val == 0
					obj.ActiveButtonPress(obj.(TglList{k}));
				end
			end
			
		end
		%%------------------------------------------------------------------------------------------------%%
		function UnActiveAll(obj)
			
			TglList = {'Xtgl', 'Ytgl', 'Ztgl'};
			for k = 1:numel(TglList)
				Val = get(obj.(TglList{k}), 'value');
				if Val == 1
					obj.ActiveButtonPress(obj.(TglList{k}));
				end
			end
			
		end
		%%------------------------------------------------------------------------------------------------%%	
		function ChcRetrive(obj, Comp)
			
			PChc = obj.getChc();
			PTar = obj.getTar();
			
			switch Comp
				case 'X'
					PTar(1) = PChc(1);
				case 'Y'
					PTar(2) = PChc(2);
				case 'Z'
					PTar(3) = PChc(3);
			end
			
			obj.SetPoint('Tar', PTar(1), PTar(2), PTar(3));
			
			obj.WriteAllField();
			
			obj.CompDiffAll();
			
		end
		%%------------------------------------------------------------------------------------------------%%
		function Stat = GetStatus(obj)
			Stat(1,1) = get(obj.Xtgl, 'value');
			Stat(2,1) = get(obj.Ytgl, 'value');
			Stat(3,1) = get(obj.Ztgl, 'value');
		end
		%%------------------------------------------------------------------------------------------------%%
		function ActiveButtonTogle(obj, Comp)
			switch Comp
				case 'X'
					obj.ActiveButtonPress(obj.Xtgl);
				case 'Y'
					obj.ActiveButtonPress(obj.Ytgl);
				case 'Z'
					obj.ActiveButtonPress(obj.Ztgl);
			end
		end
		%%------------------------------------------------------------------------------------------------%%
		function ChcTolleranceRetrive(obj, Tol)
										
			Dist = sqrt((obj.Tar.X-obj.Chc.X)^2 + (obj.Tar.Y-obj.Chc.Y)^2 + (obj.Tar.Z-obj.Chc.Z)^2);
			
			if Dist < Tol
				obj.ChcRetrive('X');
				obj.ChcRetrive('Y');
				obj.ChcRetrive('Z');
			end
				
		end
		%%------------------------------------------------------------------------------------------------%%
		function Coord = GetCoord(obj, Type, Comp)
			
			switch Type
				case 'Chc'
					Point = obj.getChc();
					switch Comp
						case 'X'
							Coord = Point(1);
						case 'Y'
							Coord = Point(2);
						case 'Z'
							Coord = Point(3);
					end
				case 'Tar'
					Point = obj.getTar();
					switch Comp
						case 'X'
							Coord = Point(1);
						case 'Y'
							Coord = Point(2);
						case 'Z'
							Coord = Point(3);
					end			
			end
			
		end
		%%------------------------------------------------------------------------------------------------%%
	end
	
end